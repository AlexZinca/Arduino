MASTER 
#define MISO 12
#define MOSI 11
#define PIN_CLOCK 13
#define CHIP_SELECT 10
#define ADC_VREF_TYPE ((0 << REFS1) | (0 << REFS0) | (0 << ADLAR))
#define btn_1 3
#define btn_2 2

float stepADC = 0.0048828125;
int tempSet = 28;
int currentTemp = 0;
int copyAdc = 0;
int tempMaxim = 85;
int humidity; 
int counter =0;

int contor = 0;
int secunde = 0;
int minute = 0;
int ore = 0;
int caz = 0;

bool btn1 = false;
bool btn2 = false;
bool boolTemp = true;
unsigned int sensorRead = 0;
float voltage = 0;
float temperature = 0;
int temperatureInt = 0;


void setup_pins() {
  DDRB |= (1 << 2) | (1 << 3) | (1 << 5); // MOSI, PIN_CLOCK, CHIP_SELECT iesiri
  DDRB &= ~(1 << 4); // MISO ca intrare
  
  DDRD = (0 << 2) | (0 << 3);
 
  EICRA = (1 << ISC11) | (1 << ISC10) | (1 << ISC01) | (1 << ISC00);
  EIMSK = (1 << INT1)  | (1 << INT0);
  EIFR  = (0 << INTF1) | (0 << INTF0);
  PCICR = (0 << PCIE2) | (0 << PCIE1) | (0 << PCIE0);
  
  //seteaza mod de functionare CTC
  TCCR0A = (1 << WGM01) | (0 << WGM00);
  //Configurare valoare de top
  OCR0A =  0xF9;
  //Activeaza intrerupere aferenta modulului de functionare de tip comparare
  TIMSK0 |=(1<<OCIE0A);
  //Configurare prescalar 256
  TCCR0B = (1 << CS02) | (0 << CS01) | (0 << CS00);
  
  SREG |= (1 << SREG_I); 
}

ISR(INT0_vect) {
  SREG &= ~(1 << SREG_I);
  btn2 = true;
  SREG |= (1 << SREG_I);
}

ISR(INT1_vect) {
  SREG &= ~(1 << SREG_I);
  btn1 = true;
  SREG |= (1 << SREG_I);
}

//Rutina de intrerupere pentru contorizarea secundelor 
ISR(TIMER0_COMPA_vect){
  //Dezactivare intreruperi globale 
  SREG &= ~(1<<SREG_I);
  //au mai trecut 4ms, deci incrementam contor 
  ++contor;
  
  //daca contorul a ajuns la 250 adica 250x4ms = 1s
  if(contor >=250){
    //incrementam secundele si resetam contor
    ++secunde;
    contor = 0;
    
  }
  //Activare intreruperi globale
  	SREG |=(1<<SREG_I);  
}

void waitTime(int time) {
  secunde=0;
  while (secunde<=time) {
    secunde++;
  }
  secunde=0;  
}

void initializareADC() {
  DIDR0 = (0 << ADC5D) | (0 << ADC4D) | (0 << ADC3D) | (0 << ADC2D) | (0 << ADC1D) | (0 << ADC0D);
  ADMUX = ADC_VREF_TYPE;
  ADCSRA = (1 << ADEN) | (0 << ADSC) | (1 << ADATE) | (0 << ADIF) | (0 << ADIE) | (1 << ADPS2) | (0 << ADPS1) | (0 << ADPS0);
}

unsigned int citesteADC(unsigned char adcInput) {
  ADMUX = adcInput | ADC_VREF_TYPE;
	//delay necesar pentru stabilizare ADC
    //pentru tensiunea de intrare analogica 
  waitTime(1000);
  // start conversie
  ADCSRA |= (1 << ADSC);
	//se asteapta finalizare conversie 
  while ((ADCSRA & (1 << ADSC)) == 0) {}
  ADCSRA |= (1 << ADIF);

  waitTime(50);
  return ADCW;
}

void clock_cycle() {
  PORTB |= (1 << (PIN_CLOCK - 8)); // Set PIN_CLOCK high
  waitTime(20);
  
  PORTB &= ~(1 << (PIN_CLOCK - 8)); // Set PIN_CLOCK low
  waitTime(20);
  
}

void start_transmission(int slave_pin) {
  PORTB &= ~(1 << (slave_pin - 8));
}

void stop_transmission(int slave_pin) {
  PORTB |= (1 << (slave_pin - 8));
}

void send_byte(byte dataByte) {
  for (int index_bits = 0; index_bits < 8; index_bits++) {
    bool current_bit = dataByte & (0x80 >> index_bits);

    if (current_bit) {
      // Set MOSI high
      PORTB |= (1 << 3);  // Assuming MOSI is digital pin 11, which is PB3 on Arduino Uno
    } else {
      // Set MOSI low
      PORTB &= ~(1 << 3); // Assuming MOSI is digital pin 11, which is PB3 on Arduino Uno
    }

    clock_cycle();
  }
}

void send_data_int(int data) {
  send_byte((byte)(data >> 8));  // Send the higher byte
  send_byte((byte)(data & 0xFF));  // Send the lower byte
}

void communnicationSPI(int val1, int val2, int val3 ){
  
  start_transmission(CHIP_SELECT);
  waitTime(100);

  send_data_int(val1); // Send temperature
  send_data_int(val2); 
  send_data_int(val3);// Send tempSet

  stop_transmission(CHIP_SELECT);
  waitTime(100);

  Serial.print("Send current temperature sent: ");
  Serial.print(val1);
  Serial.print(char(176));
  Serial.println("C");
  
  Serial.print("Send set temperature: ");
  Serial.print(val2);
  Serial.print(char(176));
  Serial.println("C");
  
  Serial.print("Send humidity: ");
  Serial.print(val3);
  Serial.print(char(176));
  Serial.println("C");
  
}

int calculateHumidity(int temp) {
  float result;

  if(temp >= -40 && temp <= 0) {
    float a = 1.0 / 150.0;
    float b = 16.0 / 15.0;
    float c = 100.0;
    result = (a * temp * temp) + (b * temp) + c;
  }
  else if(temp > 0 && temp < 60) {
    result = 100;
  }
  else{ 
    result= (-0.5) * temp + 130;
  } 
  
  return (int)result; // Cast the float result to an int to match the function return type
}

void setup() {
  Serial.begin(9600);
  setup_pins();
  initializareADC();
}

void loop() {
  if (btn1) {
    tempSet++;
    btn1 = false;
  }

  if (btn2) {
    tempSet--;
    btn2 = false;
  }
// prima iterate citeste de la senzor, restul verifica daca 
// temperatura initiala citita de la senzor difera de cea curenta de la senzor 
  sensorRead = citesteADC(0);
  voltage = sensorRead * stepADC;
  temperature = (voltage - 0.5) * 100;
  temperatureInt = (int)temperature;
  humidity = calculateHumidity(currentTemp);
  
  if (abs(temperatureInt - copyAdc) > 0) {

    copyAdc = temperatureInt;
    currentTemp = temperatureInt;
    if(currentTemp > tempMaxim) {
      currentTemp = tempMaxim;
      humidity = calculateHumidity(currentTemp);
    }  
  }
  else{
 
    if (currentTemp < tempSet && currentTemp<tempMaxim) {
      if(counter==3){
      	currentTemp++;
      	humidity = calculateHumidity(currentTemp);
        counter = 0;
   	  }
   	  else{
		counter++;    
   	  }
 	}else if (currentTemp > tempSet && currentTemp<=tempMaxim) {
      if(counter==3){
      		currentTemp--;
      		humidity = calculateHumidity(currentTemp);
            counter = 0;
      }
      else{
        counter++; 
      }
    }  
  }
  
  communnicationSPI(currentTemp, tempSet, humidity);
  waitTime(50);
 
}
